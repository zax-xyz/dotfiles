# vim: ft=sh

haste() {
    # this is marginally faster than actually parsing the json (idk why i did this)
    curl -X POST -s -d "$(cat)" https://bin.zaxu.xyz/documents | sed -E 's|\{"key":"(.+)"}|https://bin.zaxu.xyz/\1|'
}

# make directory and cd into it
mkcd() {
    mkdir -p "$1"
    cd "$1"
}

#
# prepare tiling coding environments
# assumes empty desktop, sensible wm keybindngs, and binary space partioning
#

# create c directories and copy Makefile template
cdirs() {
    mkdir -p lib src
    cp ~/Templates/Makefile .
}

# aliases to set delay easily
xdelay=0
alias xkey="xdotool key --delay $xdelay"
alias xtype="xdotool type --delay $xdelay"

# switch to the leftward window in tiling window manager configuration
alias left_window="xkey Super+h"

# move the cursor back before the file extension
# requires vi mode in shell
alias move_cursor_back="xdotool key Escape F period i"

# prepare C development environment in a tiling window manager
cprep() {
    # create directories
    cdirs

    # create new terminal window for compiler
    $TERMINAL & disown
    sleep 0.2  # ensure the window spawns before we start typing

    name=${1%.c}

    if [ -n "$name" ]; then
        # prepare compile command
        xtype "make"

        # Makefile target
        if [ -n "$2" ]; then
            sed -i "s/<++>/$2/" Makefile
            xtype " && ./$2"
        fi

        left_window

        upper=$(echo $name | tr "[a-z]" "[A-Z]")

        # Header
        echo "#ifndef ${upper}_H\n#define ${upper}_H\n\n#endif" > "lib/$name.h"

        # Include header
        echo "#include \"$name.h\"\n" > "src/$name.c"

        # start editing
        vim "src/$name.c"
    else
        # prepare compile command
        xtype "make"

        left_window

        # prepare vim command
        xtype "vim src/.c"
        move_cursor_back
    fi
}

# prepare Python development environment in a tiling window manager"
pyprep() {
    # interactive python shell
    $TERMINAL -e ipython & disown
    sleep 0.05  # ensure the next terminal spawns after

    # window to run the program
    $TERMINAL & disown
    sleep 0.3  # ensure the window spawns before we start typing

    name=${1%.py}

    if [ -n "$name" ]; then
        # prepare run command
        xtype "python $name.py"
        left_window

        # start editing
        vim "$name.py"
    else
        # prepare run command
        xtype "python "
        left_window

        # prepare vim command
        xtype "vim .py"
        move_cursor_back
    fi
}

jcr() {
    name=${1%.java}
    javac $name.java && java $name
}

load-nvm() {
    source /usr/share/nvm/init-nvm.sh

    autoload -U add-zsh-hook
    load-nvmrc() {
      local nvmrc_path="$(nvm_find_nvmrc)"

      if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
          nvm install
        elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
          nvm use
        fi
      elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
        echo "Reverting to nvm default version"
        nvm use default
      fi
    }
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc
}

mkgv() {
    mkcd "$1"
    g init
    vim
}

rgl() {
    rg -p "$@" | less -R
}

d() {
    dir=$(fd --type directory | sk)
    [ -n "$dir" ] && cd "$dir" || return 0
}

e() {
    fn=$(sk)
    [ -n "$fn" ] && vim "$fn" || return 0
}

ns() {
    fn=$(sk)
    [ -n "$fn" ] && nvr -l "$fn" || return 0
}
